# Deklaracja zmiennej globalnej
const int test = 8;

# Prosta funkcja operująca na dwóch argumentach i przesłonięciach
function plus (int x, int z) : int
{
    int y = (true as int);
    y = x + z;
    return y;
}

# Rekurencja i wyrażenia ternarne
function factorial (int f) : int
{
    int x;
    return f > 1 ? f * factorial(f - 1) : 1;
}

function inc (int x) : int {
    x++;
    return x; }

function dec (int x) : int
{
    x--;
    return x;
}

main
{
    # Zakomentowane nie działają
    int x = 5;
    # Przypisanie wartości innego typu
    # bool y = 5;
    bool y = false;
    int tab[10];
    # Nie działająca redeklaracja
    # bool y;
    print(test);
    # Deklaracja w bloku instrukcji
    # bool nieDziałam;
    x++;
    x--;
    # Przypisanie wartości złego typu
    # x = y;
    inc(x);
    factorial(&x);
    # Podanie parametru złego typu
    # factorial(y);
    # Podanie złej liczby parametrów
    # factorial();
    # factorial(x,x);
    from 1 to 5 as loop do
    {
        x++;
    }
    print(x);
    while (x < 15)
    {
        x++;
    }
    # Blok guard: x w środku będzie stałą
    guard (x) in {
        print(x);
    }
    print(x);
    print(factorial(5));
    factorial(5);
    x = 5;
    x = factorial(&x);
    # Bardzo fantazyjne opakowanie na instrukcję print funkcją anonimową
    y = execute bool {int asd; print(x); return true;};

    print("Test");
    if (true) {} else {}
    if (x > 3)
    {print(x > 3);}
    else if (true) {print ("Error");}
    else {print ("Error");}

    # x to nadal 6, oczekujemy faszu na konsoli
    if (x > 2 && x < 4)
        {print("Error");}
    else {}

    print(factorial(5) == 123 && true);
    # Błędny typ w wyrażeniu logicznym
    # print(factorial(5) == 123 && 1);

    # Trochę arytmetyki w obu wydaniach
    print(-(true && false));
    print(5);
    print(-5);
    print(-factorial(5) + 1);
}