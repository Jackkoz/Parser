# Deklaracja zmiennej globalnej
const int test = 0;

# Prosta funkcja operująca na dwóch argumentach i przesłoniętym
# y (z punktu widzenia bloku main)
function plus (int x, int z) : int
{
    int y;
    y = x + z;
    return y;
}

# Rekurencja
function factorial (int f) : int
{
    return f > 1 ? f * factorial(f - 1) : 1;
}

function inc (int x) : int {
    x++;
    return x;
}

function dec (int x) : int {
    x--;
    return x;
}

# Przykład zagnieżdżonych funkcji
function nest1 (int x) : int
{
    function nest2 (int y) : int
    {
        function nest3 (int z) : int
        {
            return nest2(z) + 1;
        }
        y++;
        return y < 3 ? nest3(y) + 1 : y;
    }

    return nest2(x) + 1;
}

main
{
    # Deklaracja zmiennej x z wartością 5
    int x = 5;
    # Deklaracja zmiennej y z domyślną wartością 0
    int y;
    # Rzutowanie
    int cast = (true as int);
    print(cast);
    cast = ((true && false) as int);
    print(cast);

    print("*** For ***");
        from 1 to 5 as loop do
    {
        print(loop);
    }

    # Zmienna loop w tym miejscu nie istnieje
    # print(loop);

    print("*** Test funkcji ***");
    print(plus(x,y+1));
    inc(&y);
    print(y);
    dec(&y);
    print(y);

    print("*** Test rekurencji ***");
    print(factorial(5));

    print("*** Test zagnieżdżania ***");
    print(nest1(y));

    print("*** Test funkcji anonimowej ***");
    print(execute int {int nested = 0; return nest1(nested);});
    print("*** ***");

    # Wykorzystanie funkcji jako procedury
    factorial(5);

    # Test zmiennej globalnej
    print(test);

    # Nielegalna linijka -> test to stała
    # test++;

    # Blok guard: x w środku będzie stałą
    guard (x) in {
        print("Wejscie do bloku guard");
        # Wypisuje 5
        print(x);

        # Nielegalne nadpisanie wartości
        # x++;
    }

    # Zwiększenie wartości x o 1, legalne po bloku guard
    x++;
    print(x);

    print("*** Test logiki boolowskiej ***");
    if (x > 3)
    {
        print(true);
    }
    else if (true) {print("Wrong");}
    else {print("Wrong");}

    if (x > 2 && x < 4)
        {x += 1;}
    else
    {
        print (false);
    }

    # Przykład pętli while
    while (x < 10 || x < 9)
    {
        x++;
        print(x);
    }

    # Ternary expression jak w Javie/C++
    # y == 0 z domylnej definicji, więc oczekujemy '1' na konosli
    y = y == 0 ? 1 : -1;
    print(y);

    # Dzielenie jest całkowitoliczbowe, więc powinno wypisać się 0
    print(y / (2 * y));

    y = 10;
    y /= 2;
    print(y);

    print (x * (y + 1) + 1);

    print(1 > 2);
    print(true);
}