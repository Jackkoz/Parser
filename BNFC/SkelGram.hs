module SkelGram where

-- Haskell module generated by the BNF converter

import AbsGram
import ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transProgram :: Program -> Result
transProgram x = case x of
  Prog decls functiondeclarations block  -> failure x


transBlock :: Block -> Result
transBlock x = case x of
  SBlock decls functiondeclarations stmts  -> failure x


transRBlock :: RBlock -> Result
transRBlock x = case x of
  SRBlock decls functiondeclarations stmts expression  -> failure x


transDecl :: Decl -> Result
transDecl x = case x of
  Declr type' identifier  -> failure x
  DAssign type' identifier expression  -> failure x
  DConstDec type' identifier expression  -> failure x


transFunctionDeclaration :: FunctionDeclaration -> Result
transFunctionDeclaration x = case x of
  FDec identifier argumentss type' rblock  -> failure x


transCallArgs :: CallArgs -> Result
transCallArgs x = case x of
  Cargs expression  -> failure x
  Ref identifier  -> failure x


transArguments :: Arguments -> Result
transArguments x = case x of
  Args type' identifier  -> failure x


transStmt :: Stmt -> Result
transStmt x = case x of
  SAssign assignment  -> failure x
  SExp expression  -> failure x
  SWhile exp block  -> failure x
  SFor exp0 exp identifier block  -> failure x
  SGuard identifiers block  -> failure x
  Sprint exp  -> failure x
  SprintS str  -> failure x
  SIf if'  -> failure x
  SIfE if' block  -> failure x


transIf :: If -> Result
transIf x = case x of
  If exp block eifs  -> failure x


transEIf :: EIf -> Result
transEIf x = case x of
  SEIf exp block  -> failure x


transExpression :: Expression -> Result
transExpression x = case x of
  Exp exp  -> failure x
  ExpTer exp0 exp1 exp  -> failure x


transExp :: Exp -> Result
transExp x = case x of
  Eor exp0 exp  -> failure x
  Eand exp0 exp  -> failure x
  Eeq exp0 exp  -> failure x
  Elt exp0 exp  -> failure x
  Egt exp0 exp  -> failure x
  EAdd exp0 exp  -> failure x
  ESub exp0 exp  -> failure x
  EMul exp0 exp  -> failure x
  EDiv exp0 exp  -> failure x
  EMinus exp  -> failure x
  ECast exp type'  -> failure x
  Call identifier callargss  -> failure x
  Anon type' rblock  -> failure x
  EVar identifier  -> failure x
  EInt n  -> failure x
  Etrue  -> failure x
  Efalse  -> failure x


transAssignment :: Assignment -> Result
transAssignment x = case x of
  Assign identifier expression  -> failure x
  AArith identifier arassign expression  -> failure x
  AIncDec identifier incdec  -> failure x


transType :: Type -> Result
transType x = case x of
  TInt  -> failure x
  TBool  -> failure x


transIdentifier :: Identifier -> Result
transIdentifier x = case x of
  Id id  -> failure x


transArAssign :: ArAssign -> Result
transArAssign x = case x of
  AAPlus  -> failure x
  AAMinus  -> failure x
  AAMulti  -> failure x
  AADiv  -> failure x


transIncDec :: IncDec -> Result
transIncDec x = case x of
  Increment  -> failure x
  Decrement  -> failure x



