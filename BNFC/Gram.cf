entrypoints Program ;

Prog.       Program     ::=     [Decl] [FunctionDeclaration] "main" Block ;

SBlock.     Block       ::=     "{" [Decl] [FunctionDeclaration] [Stmt] "}" ;
SRBlock.    RBlock      ::=     "{" [Decl] [FunctionDeclaration] [Stmt] "return" Expression ";" "}" ;

Declr.          Decl    ::=     Type Identifier ;
DAssign.        Decl    ::=     Type Identifier "=" Expression ;
DConstDec.      Decl    ::=     "const" Type Identifier "=" Expression ;

terminator      Decl ";" ;

FDec.       FunctionDeclaration ::=     "function" Identifier "(" [Arguments] ")" ":" Type  RBlock ;

terminator  FunctionDeclaration "" ;

Cargs.      CallArgs            ::=     Expression ;
Ref.        CallArgs            ::=     "&" Identifier;
Args.       Arguments           ::=     Type Identifier ;

separator   CallArgs    "," ;
separator   Arguments   "," ;

SAssign.    Stmt      ::=     Assignment ";"   ;
SExp.       Stmt      ::=     Expression ";"   ;
SWhile.     Stmt      ::=     "while" "(" Exp ")" Block ;
SFor.       Stmt      ::=     "from" Exp "to" Exp "as" Identifier "do" Block;
SGuard.     Stmt      ::=     "guard" "(" [Identifier] ")" "in" Block ;
Sprint.	    Stmt      ::=     "print" "(" Exp ")" ";" ;
SprintS.    Stmt      ::=     "print" "(" String ")" ";" ;
SIf.        Stmt      ::=     If ;
SIfE.       Stmt      ::=     If "else" Block ;

terminator Stmt "" ;

If.         If      ::=     "if (" Exp ")" Block [EIf] ;
SEIf.       EIf     ::=     "else if (" Exp ")" Block  ;

terminator EIf "" ;

Exp.        Expression  ::=     Exp  ;
ExpTer.	    Expression  ::=     Exp "?" Exp ":" Exp ;

Eor.     Exp  ::= Exp "||" Exp1 ;
Eand.    Exp  ::= Exp "&&" Exp1 ;
Eeq.     Exp1 ::= Exp1 "=="  Exp2 ;
Elt.     Exp2 ::= Exp2 "<"  Exp3 ;
Egt.     Exp2 ::= Exp2 ">"  Exp3 ;

EAdd.    Exp3 ::= Exp3 "+" Exp4 ;
ESub.    Exp3 ::= Exp3 "-" Exp4 ;
EMul.    Exp4 ::= Exp4 "*" Exp5 ;
EDiv.    Exp4 ::= Exp4 "/" Exp5 ;
EMinus.  Exp5 ::= "-" Exp6 ;
ECast.   Exp5 ::= "(" Exp6 "as" Type ")" ;

Call.    Exp6 ::= Identifier "(" [CallArgs] ")"  ;
Anon.    Exp6 ::= "execute" Type RBlock ;
EVar.    Exp6 ::= Identifier    ;
EInt.    Exp6 ::= Integer       ;
Etrue.   Exp6 ::= "true"        ;
Efalse.  Exp6 ::= "false"       ;

coercions Exp 6 ;

Assign.         Assignment      ::=     Identifier "=" Expression ;
AArith.         Assignment      ::=     Identifier ArAssign Expression ;
AIncDec.        Assignment      ::=     Identifier IncDec ;

TInt.           Type            ::=     "int" ;
TBool.          Type            ::=     "bool" ;

Id.             Identifier      ::=     Ident ;
Arr.            Identifier      ::=     Ident "[" Exp "]" ;

separator nonempty Identifier  "," ;

AAPlus.         ArAssign        ::=     "+=" ;
AAMinus.        ArAssign        ::=     "-=" ;
AAMulti.        ArAssign        ::=     "*=" ;
AADiv.          ArAssign        ::=     "/=" ;

Increment.      IncDec          ::=     "++" ;
Decrement.      IncDec          ::=     "--" ;

comment "#" ;
comment "/*" "*/" ;