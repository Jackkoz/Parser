module AbsGram where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data Program =
   Prog [TypeDeclaration] [Decl] [FunctionDeclaration] Block
  deriving (Eq,Ord,Show)

data Block =
   SBlock [St]
  deriving (Eq,Ord,Show)

data RBlock =
   SRBlock [St] Expression
  deriving (Eq,Ord,Show)

data Decl =
   Declr Type Identifier
 | DAssign Type Identifier Expression
 | DConstDec Type Identifier Expression
  deriving (Eq,Ord,Show)

data TypeDeclaration =
   TDef Identifier Type
  deriving (Eq,Ord,Show)

data FunctionDeclaration =
   FDec Identifier [Arguments] Type RBlock
 | PDec Identifier [Arguments] Block
  deriving (Eq,Ord,Show)

data CallArgs =
   Cargs Expression
  deriving (Eq,Ord,Show)

data Arguments =
   Args Type Identifier
  deriving (Eq,Ord,Show)

data St =
   SDec Decl
 | SAssign Assignment
 | SExp Expression
 | SWhile Exp Block
 | SFor Exp Exp Ident Block
 | SGuard [Identifier] Block
 | SIf If
 | SIfE If Block
  deriving (Eq,Ord,Show)

data If =
   If Exp Block [EIf]
  deriving (Eq,Ord,Show)

data EIf =
   SEIf Exp Block
  deriving (Eq,Ord,Show)

data Expression =
   Exp Exp
  deriving (Eq,Ord,Show)

data Exp =
   Eor Exp Exp
 | Eand Exp Exp
 | Eeq Exp Exp
 | Elt Exp Exp
 | Egt Exp Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EMinus Exp
 | Call Identifier [CallArgs]
 | EVar Identifier
 | EInt Integer
 | Etrue
 | Efalse
  deriving (Eq,Ord,Show)

data Assignment =
   Assign Identifier Expression
 | AArith Identifier ArAssign Expression
 | AIncDec Identifier IncDec
  deriving (Eq,Ord,Show)

data Type =
   TInt
 | TBool
  deriving (Eq,Ord,Show)

data Identifier =
   Id Ident
  deriving (Eq,Ord,Show)

data ArAssign =
   AAPlus
 | AAMinus
 | AAMulti
 | AADiv
  deriving (Eq,Ord,Show)

data IncDec =
   Increment
 | Decrement
  deriving (Eq,Ord,Show)

